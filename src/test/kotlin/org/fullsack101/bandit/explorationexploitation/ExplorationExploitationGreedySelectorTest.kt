package org.fullsack101.bandit.explorationexploitation

import assertk.assertThat
import assertk.assertions.isBetween
import assertk.assertions.isEqualTo
import org.junit.jupiter.api.Test

private const val TEST_EXECUTION_COUNT = 100_000

class ExplorationExploitationGreedySelectorTest {

    @Test
    fun `calculateNextPredictionType - allows exploration only`() {

        val explorationExploitationGreedySelector = ExplorationExploitationGreedySelector(
            explorationPercentage = Percentage(100)
        )

        val (explorationCount, exploitationCount) = executeCalculation(
            explorationExploitationGreedySelector
        )

        assertThat(explorationCount).isEqualTo(TEST_EXECUTION_COUNT)
        assertThat(exploitationCount).isEqualTo(0)
    }

    @Test
    fun `calculateNextPredictionType - allows exploitation only`() {

        val explorationExploitationGreedySelector = ExplorationExploitationGreedySelector(
            explorationPercentage = Percentage(0)
        )

        val (explorationCount, exploitationCount) = executeCalculation(
            explorationExploitationGreedySelector
        )

        assertThat(explorationCount).isEqualTo(0)
        assertThat(exploitationCount).isEqualTo(TEST_EXECUTION_COUNT)
    }

    @Test
    fun `calculateNextPredictionType - returns correct exploration amount`() {
        val explorationExploitationGreedySelector = ExplorationExploitationGreedySelector(
            explorationPercentage = Percentage(30)
        )

        val (explorationCount, exploitationCount) = executeCalculation(
            explorationExploitationGreedySelector
        )

        val explorationRatio = explorationCount.toFloat() / (explorationCount + exploitationCount)

        assertThat(explorationRatio).isBetween(0.29f, 0.31f)
    }

    private fun executeCalculation(
        explorationExploitationGreedySelector: ExplorationExploitationGreedySelector
    ): Pair<Int, Int> {
        var explorationCount = 0
        var exploitationCount = 0

        repeat(TEST_EXECUTION_COUNT) {
            val predictionType = explorationExploitationGreedySelector.calculateNextPredictionType()

            if (predictionType == PredictionType.EXPLORATION) {
                explorationCount++
            } else {
                exploitationCount++
            }
        }
        return Pair(explorationCount, exploitationCount)
    }
}
